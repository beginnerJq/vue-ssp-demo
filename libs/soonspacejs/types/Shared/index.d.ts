declare const hasOwn: (val: object, key: string | symbol) => key is never;
declare const isString: (val: unknown) => val is string;
declare const isBoolean: (val: unknown) => val is boolean;
declare const isNumber: (val: unknown) => val is number;
declare const isNull: (val: unknown) => val is null;
declare const isSymbol: (val: unknown) => val is symbol;
declare const isDate: (val: unknown) => val is Date;
declare const isArray: (arg: any) => arg is any[];
declare const isObject: <T = Record<any, any>>(val: unknown) => val is T;
declare const isFunction: (val: unknown) => val is () => void;
declare const isPromise: <T = any>(val: unknown) => val is Promise<T>;
declare const typeJudge: (val: any) => string;
declare const sleep: (time: number) => Promise<void>;
declare const getAsciiString: (buf: ArrayBufferLike, offset: number, len: number) => string;
export * from './log';
export * from './viewport';
export * from './MinHeap';
export * from './map';
export * from './sbmx';
export { hasOwn, };
export { isString, isBoolean, isNumber, isNull, isSymbol, };
export { isDate, isArray, isObject, isFunction, isPromise, };
export { typeJudge, sleep, getAsciiString, };
